service: serverless-color-tracking

frameworkVersion: "3"

# TODO: Add WAF to protect the API Gateway from DDoS attacks
# TODO: check wether API Key provided by clients exist in the database before allowing them to connect to the websocket
# TODO: integrate Lumigo for monitoring and debugging (FREE tier supports 150K traces per month)
# TODO: add "events per second" column associated with each API Key in database
# TODO: define "limit" for "events per second" for each API Key in database
# TODO: simulate 1K users sending events to API Gateway and see how it scales

provider:
  name: aws
  runtime: python3.9
  profile: default
  region: us-east-1
  logRetentionInDays: 7
  environment:
    # TODO: put into SSM Manager stores (helps for rotation of the values itself) and use AWS KMS to encrypt this value
    ADMIN_API_KEY: ${file(./secrets.json):ADMIN_API_KEY}
    CONNECTIONS_TABLE: ${self:service}-${sls:stage}-connectionsTable
    STATS_TABLE: ${self:service}-${sls:stage}-statsTable
    CLICKS_STREAM: ${self:service}-${sls:stage}-clicksStream
    HOVERS_STREAM: ${self:service}-${sls:stage}-hoversStream
  websocketsApiName: ${self:service}-${sls:stage}-websocketApi
  websocketsApiRouteSelectionExpression: $request.body.action
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - kinesis:GetRecords
            - kinesis:GetShardIterator
            - kinesis:DescribeStream
            - kinesis:ListStreams
            - kinesis:PutRecord
            - kinesis:PutRecords
          Resource:
            - Fn::GetAtt: [kinesisClicksStream, Arn]
        - Effect: Allow
          Action:
            - kinesis:GetRecords
            - kinesis:GetShardIterator
            - kinesis:DescribeStream
            - kinesis:ListStreams
            - kinesis:PutRecord
            - kinesis:PutRecords
          Resource:
            - Fn::GetAtt: [kinesisHoversStream, Arn]
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Scan
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.STATS_TABLE}"
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}"
        - Effect: Allow
          Action:
            - "execute-api:ManageConnections"
          Resource:
            - "arn:aws:execute-api:*:*:**/@connections/*"

plugins:
  - serverless-python-requirements
  # TODO: try serverless-finch to deploy static website
  # TODO: try AWS Amplify to deploy static website. Github repo can be connected to Amplify to deploy automatically any changes.

functions:
  createEvent:
    handler: lambdas/endpoints/v1/events/producer.handler
    events:
      - http:
          path: /v1/events
          method: post
          cors: true

  clicksConsumer:
    handler: lambdas/consumers/clicks.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - kinesisClicksStream
              - Arn

  hoversConsumer:
    handler: lambdas/consumers/hovers.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - kinesisHoversStream
              - Arn

  broadcastClicks:
    handler: lambdas/websockets/broadcast/clicks.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - kinesisClicksStream
              - Arn

  broadcastHovers:
    handler: lambdas/websockets/broadcast/hovers.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - kinesisHoversStream
              - Arn

  broadcastAdminStats:
    handler: lambdas/websockets/broadcast/admin/stats.handler
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - kinesisClicksStream
              - Arn
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
              - kinesisHoversStream
              - Arn

  getStats:
    handler: lambdas/endpoints/v1/stats/get.handler
    events:
      - http:
          path: /v1/stats
          method: get
          cors: true

  getAdminStats:
    handler: lambdas/endpoints/admin/stats.handler
    events:
      - http:
          path: /admin/v1/stats
          method: get
          cors: true

  websocketConnections:
    handler: lambdas/websockets/manager.handler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

resources:
  Resources:
    kinesisClicksStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:provider.environment.CLICKS_STREAM}
        RetentionPeriodHours: 24
        ShardCount: 1
    kinesisHoversStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:provider.environment.HOVERS_STREAM}
        RetentionPeriodHours: 24
        ShardCount: 1
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        KeySchema:
          - AttributeName: ConnectionId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: ConnectionId
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
    StatsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STATS_TABLE}
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
